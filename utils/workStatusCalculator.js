import { parseISO, differenceInMinutes, format } from "date-fns"

/**
 * T√≠nh to√°n tr·∫°ng th√°i c√¥ng d·ª±a tr√™n d·ªØ li·ªáu ch·∫•m c√¥ng v√† ca l√†m vi·ªác
 * @param {Array} logs - M·∫£ng c√°c log ch·∫•m c√¥ng trong ng√†y
 * @param {Object} shift - Th√¥ng tin ca l√†m vi·ªác
 * @returns {Object} Tr·∫°ng th√°i c√¥ng ƒë√£ t√≠nh to√°n
 */
export const calculateWorkStatus = (logs, shift) => {
  if (!logs || !shift) {
    return {
      status: "unknown", // Ch∆∞a c·∫≠p nh·∫≠t
      checkInTime: null,
      checkOutTime: null,
      totalWorkTime: 0,
      overtime: 0,
      remarks: "",
    }
  }

  // T√¨m c√°c log ch·∫•m c√¥ng
  const goWorkLog = logs.find((log) => log.type === "go_work")
  const checkInLog = logs.find((log) => log.type === "check_in")
  const checkOutLog = logs.find((log) => log.type === "check_out")
  const punchLog = logs.find((log) => log.type === "punch")
  const completeLog = logs.find((log) => log.type === "complete")

  // Ki·ªÉm tra tr·∫°ng th√°i ho√†n t·∫•t
  const isCompleted =
    logs.some((log) => log.type === "complete") ||
    (checkOutLog && checkInLog) ||
    (goWorkLog && logs.length === 1 && shift.onlyGoWorkMode)

  // Parse th·ªùi gian t·ª´ shift
  const parseShiftTime = (timeStr) => {
    const [hours, minutes] = timeStr.split(":").map(Number)
    const date = new Date()
    date.setHours(hours, minutes, 0, 0)
    return date
  }

  const startTime = parseShiftTime(shift.startTime)
  const officeEndTime = parseShiftTime(shift.officeEndTime)
  const endTime = parseShiftTime(shift.endTime)

  // Handle overnight shifts - if end time is before start time, it's the next day
  if (endTime < startTime) {
    endTime.setDate(endTime.getDate() + 1)
  }

  // N·∫øu ƒë√£ ho√†n t·∫•t ho·∫∑c ch·ªâ c√≥ n√∫t "ƒêi l√†m" v√† ƒë√£ b·∫•m
  if (isCompleted) {
    // X√°c ƒë·ªãnh th·ªùi gian check-in v√† check-out
    let actualCheckInTime, actualCheckOutTime

    if (checkInLog && checkOutLog) {
      actualCheckInTime = parseISO(checkInLog.timestamp)
      actualCheckOutTime = parseISO(checkOutLog.timestamp)

      // Handle overnight shifts - if check-out is before check-in, it's the next day
      if (actualCheckOutTime < actualCheckInTime) {
        actualCheckOutTime = new Date(actualCheckOutTime)
        actualCheckOutTime.setDate(actualCheckOutTime.getDate() + 1)
      }
    } else if (goWorkLog && shift.onlyGoWorkMode) {
      // N·∫øu ch·ªâ c√≥ n√∫t "ƒêi l√†m" v√† ƒë√£ b·∫•m
      actualCheckInTime = startTime
      actualCheckOutTime = endTime
    } else {
      // Tr∆∞·ªùng h·ª£p kh√°c, s·ª≠ d·ª•ng th·ªùi gian ca l√†m vi·ªác
      actualCheckInTime = startTime
      actualCheckOutTime = endTime
    }

    // T√≠nh OT
    let overtimeMinutes = 0
    if (actualCheckOutTime > officeEndTime) {
      overtimeMinutes = differenceInMinutes(actualCheckOutTime, officeEndTime)
      overtimeMinutes = Math.max(0, overtimeMinutes) // ƒê·∫£m b·∫£o kh√¥ng √¢m
    }

    // T√≠nh t·ªïng th·ªùi gian l√†m vi·ªác
    const totalMinutes = differenceInMinutes(endTime, startTime)

    // Chuy·ªÉn ƒë·ªïi sang gi·ªù
    const totalWorkTime = Number.parseFloat((totalMinutes / 60).toFixed(2))
    const overtime = Number.parseFloat((overtimeMinutes / 60).toFixed(2))

    return {
      status: "complete", // ƒê·ªß c√¥ng
      checkInTime: format(actualCheckInTime, "HH:mm:ss"),
      checkOutTime: format(actualCheckOutTime, "HH:mm:ss"),
      totalWorkTime,
      overtime,
      remarks: overtime > 0 ? `OT ${overtime.toFixed(2)}h.` : "",
    }
  }

  // N·∫øu kh√¥ng ho√†n t·∫•t, x·ª≠ l√Ω nh∆∞ tr∆∞·ªõc
  if (!checkInLog || !checkOutLog) {
    return {
      status: "incomplete", // Thi·∫øu ch·∫•m c√¥ng
      checkInTime: checkInLog ? format(parseISO(checkInLog.timestamp), "HH:mm:ss") : null,
      checkOutTime: checkOutLog ? format(parseISO(checkOutLog.timestamp), "HH:mm:ss") : null,
      totalWorkTime: 0,
      overtime: 0,
      remarks: "Thi·∫øu ch·∫•m c√¥ng",
    }
  }

  // Parse th·ªùi gian check-in/check-out
  const checkInTime = parseISO(checkInLog.timestamp)
  const checkOutTime = parseISO(checkOutLog.timestamp)

  // T√≠nh ph·∫°t ƒëi mu·ªôn
  let lateMinutes = 0
  if (checkInTime > startTime) {
    lateMinutes = Math.ceil(differenceInMinutes(checkInTime, startTime) / 30) * 30
  }

  // T√≠nh ph·∫°t v·ªÅ s·ªõm
  let earlyMinutes = 0
  if (checkOutTime < officeEndTime) {
    earlyMinutes = Math.ceil(differenceInMinutes(officeEndTime, checkOutTime) / 30) * 30
  }

  // T√≠nh OT
  let overtimeMinutes = 0
  if (checkOutTime > officeEndTime) {
    const maxEndTime = endTime > checkOutTime ? checkOutTime : endTime
    overtimeMinutes = differenceInMinutes(maxEndTime, officeEndTime)
    overtimeMinutes = Math.max(0, overtimeMinutes) // ƒê·∫£m b·∫£o kh√¥ng √¢m
  }

  // T√≠nh t·ªïng th·ªùi gian l√†m vi·ªác
  const totalMinutes = differenceInMinutes(checkOutTime, checkInTime)
  const totalWorkMinutes = Math.max(0, totalMinutes - lateMinutes - earlyMinutes)

  // Chuy·ªÉn ƒë·ªïi sang gi·ªù
  const totalWorkTime = Number.parseFloat((totalWorkMinutes / 60).toFixed(2))
  const overtime = Number.parseFloat((overtimeMinutes / 60).toFixed(2))

  // X√°c ƒë·ªãnh tr·∫°ng th√°i v√† ghi ch√∫
  let status = "complete" // ƒê·ªß c√¥ng
  let remarks = ""

  if (lateMinutes > 0 || earlyMinutes > 0) {
    status = "RV" // V√†o mu·ªôn/Ra s·ªõm

    if (lateMinutes > 0) {
      remarks += `ƒêi mu·ªôn ${lateMinutes} ph√∫t. `
    }

    if (earlyMinutes > 0) {
      remarks += `V·ªÅ s·ªõm ${earlyMinutes} ph√∫t. `
    }
  }

  if (overtime > 0) {
    remarks += `OT ${overtime.toFixed(2)}h. `
  }

  return {
    status,
    checkInTime: format(checkInTime, "HH:mm:ss"),
    checkOutTime: format(checkOutTime, "HH:mm:ss"),
    totalWorkTime,
    overtime,
    remarks: remarks.trim(),
  }
}

/**
 * X√°c ƒë·ªãnh tr·∫°ng th√°i hi·ªÉn th·ªã cho l∆∞·ªõi tu·∫ßn
 * @param {Object} dailyStatus - Tr·∫°ng th√°i c√¥ng c·ªßa ng√†y
 * @returns {String} Tr·∫°ng th√°i hi·ªÉn th·ªã
 */
export const getDisplayStatus = (dailyStatus) => {
  if (!dailyStatus) return "unknown"

  switch (dailyStatus.status) {
    case "complete":
      return "complete" // ‚úÖ ƒê·ªß c√¥ng
    case "incomplete":
      return "incomplete" // ‚ùó Thi·∫øu ch·∫•m c√¥ng
    case "RV":
      return "RV" // RV V√†o mu·ªôn/Ra s·ªõm
    case "leave":
      return "leave" // üì© Ngh·ªâ ph√©p
    case "sick":
      return "sick" // üõå Ngh·ªâ b·ªánh
    case "holiday":
      return "holiday" // üéå Ngh·ªâ l·ªÖ
    case "absent":
      return "absent" // ‚ùå V·∫Øng
    default:
      return "unknown" // ‚ùì Ch∆∞a c·∫≠p nh·∫≠t
  }
}

/**
 * L·∫•y icon cho tr·∫°ng th√°i
 * @param {String} status - Tr·∫°ng th√°i
 * @returns {String} T√™n icon
 */
export const getStatusIcon = (status) => {
  switch (status) {
    case "complete":
      return "checkmark-circle"
    case "incomplete":
      return "alert-circle"
    case "RV":
      return "time"
    case "leave":
      return "mail"
    case "sick":
      return "medkit"
    case "holiday":
      return "flag"
    case "absent":
      return "close-circle"
    default:
      return "help-circle"
  }
}

/**
 * L·∫•y m√†u cho tr·∫°ng th√°i
 * @param {String} status - Tr·∫°ng th√°i
 * @param {Object} theme - Theme hi·ªán t·∫°i
 * @returns {String} M√£ m√†u
 */
export const getStatusColor = (status, theme) => {
  switch (status) {
    case "complete":
      return "#4CAF50" // Xanh l√°
    case "incomplete":
      return "#FFC107" // V√†ng
    case "RV":
      return "#FF5722" // Cam ƒë·ªè
    case "leave":
      return "#2196F3" // Xanh d∆∞∆°ng
    case "sick":
      return "#9C27B0" // T√≠m
    case "holiday":
      return "#FF9800" // Cam
    case "absent":
      return "#F44336" // ƒê·ªè
    default:
      return theme.colors.textSecondary // M√†u text ph·ª•
  }
}

